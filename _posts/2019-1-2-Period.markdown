---
layout:     post
title:      "HDU 1358 Period"
subtitle:   " \"KMP\""
date:       2019-1-2
author:     "TanJX"
comments: true
header-img: "img/acm.jpg"
tags:
    - ACM
    - KMP
---


** Period

For each prefix of a given string S with N characters (each character has an ASCII code between 97 and 126, inclusive), we want to know whether the prefix is a periodic string. That is, for each i (2 <= i <= N) we want to know the largest K > 1 (if there is one) such that the prefix of S with length i can be written as A K ,that is A concatenated K times, for some string A. Of course, we also want to know the period K.

**Input**

The input consists of several test cases. Each test case consists of two lines. The first one contains N (2 <= N <= 1 000 000) – the size of the string S.The second line contains the string S. The input file ends with a line, having the 
number zero on it.

**Output**

For each test case, output "Test case #" and the consecutive test case number on a single line; then, for each prefix with length i that has a period K > 1, output the prefix size i and the period K separated by a single space; the prefix sizes must be in increasing order. Print a blank line after each test case.

**Sample Input**

>3<br>
aaa<br>
12<br>
aabaabaabaab<br>
0

**Sample Output**

>Test case #1<br>
2 2<br>
3 3<br><br>
Test case #2<br>
2 2<br>
6 2<br>
9 3<br>
12 4

**题意**

从1-n判断每个i是否1-i是有周期性，有则输出前缀大小i和周期k

**题解**

kmp，更好的去理解一下next数组

**代码**

```
#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <string>

using namespace std;
#define me(x,y) memset(x,y,sizeof x);

typedef long long ll;
const int maxn = 1000100;
const int INF = 0x3f3f3f3f;
int NEXT[maxn];
int n;
char str[maxn];

void GETNEXT()
{
    int i = 0,j = -1;
    NEXT[0] = -1;
    while(i < n){
        if(j == -1 || str[i] == str[j]){
            NEXT[++i] = ++j;
        }
        else{
            j = NEXT[j];
        }
    }
}
int main()
{
    int k = 1;
    while(cin>>n && n){
        cin>>str;
        GETNEXT();
        // NEXT[0] = 0;
        // for(int i = 0; i <= n; i++){
        //     cout<<NEXT[i];
        // }
        // cout<<endl;
        printf("Test case #%d\n",k++);
        for(int i = 2; i <= n; i++){
            int p = i-NEXT[i];
            if(i%p == 0 & i/p > 1)
                cout<<i<<" "<<i/p<<endl;
        }
        cout<<endl;
    }
    return 0;
}
```