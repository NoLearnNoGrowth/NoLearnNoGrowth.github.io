---
layout:     post
title:      "51NOD-1021 石子归并"
date:       2018-11-20 18:00
author:     "TanJX"
comments: true
header-img: "img/acm.jpg"
tags:
    - ACM
    - DP

---

## 石子归并

N堆石子摆成一条线。现要将石子有次序地合并成一堆。规定每次只能选相邻的2堆石子合并成新的一堆，并将新的一堆石子数记为该次合并的代价。计算将N堆石子合并成一堆的最小代价。

例如： 1 2 3 4，有不少合并方法
1 2 3 4 => 3 3 4(3) => 6 4(9) => 10(19)
1 2 3 4 => 1 5 4(5) => 1 9(14) => 10(24)
1 2 3 4 => 1 2 7(7) => 3 7(10) => 10(20)

括号里面为总代价可以看出，第一种方法的代价最低，现在给出n堆石子的数量，计算最小合并代价。

### 输入

第1行：N（2 <= N <= 100)
第2 - N + 1：N堆石子的数量（1 <= A[i] <= 10000)

### 输出

输出最小合并代价

### 输入样例

>4<br>
1<br>
2<br>
3<br>
4

### 输出样例

>19

### 思路

区间DP经典

dp[i][j] 表示从i到j的最小合并代价，最后输出dp[1][n]

状态转移方程：dp[i][j] = min(dp[i][j],dp[i][k]+dp[k+1][j]+sum[j]-sum[i-1]);

### 代码

```
#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>

using namespace std;
const int N = 1005;
const int INF = 0x3f3f3f3f;

int dp[N][N],sum[N],w[N];

int main()
{
    int n;
    while(cin>>n)
    {
        memset(dp,INF,sizeof dp);
        memset(sum,0,sizeof sum);
        for(int i = 1; i <= n; i++)
            dp[i][i] = 0;
        for(int i = 1; i <= n; i++)
        {
            scanf("%d",&w[i]);
            sum[i] = sum[i-1] + w[i];
        }
        for(int l = 2; l <= n; l++)
        {
            for(int i = 1; i <= n-l+1; i++)
            {
                int j = i+l-1;
                for(int k = i ; k < j; k++)
                    dp[i][j] = min(dp[i][j],dp[i][k]+dp[k+1][j]+sum[j]-sum[i-1]);
            }
        }
        cout<<dp[1][n]<<endl;
    }
    return 0;
}
```